//
/**
* This file and any referenced files were automatically generated by @osmonauts/telescope@0.78.0
* DO NOT MODIFY BY HAND. Instead, download the latest proto files for your chain
* and run the transpile command or yarn proto command to regenerate this bundle.
*/
import { QueryClient, createProtobufRpcClient, ProtobufRpcClient } from '@cosmjs/stargate'
import { Tendermint34Client, HttpEndpoint } from "@cosmjs/tendermint-rpc";
import { grpc } from "@improbable-eng/grpc-web";
import { NodeHttpTransport } from "@improbable-eng/grpc-web-node-http-transport";
import { GrpcWebImpl } from '../codegen/cosmos/bank/v1beta1/query.rpc.Query';
import { ServiceClientImpl } from "../codegen/cosmos/tx/v1beta1/service.rpc.Service";

const _rpcClients: Record<string, ServiceClientImpl> = {};
let tmClient: ServiceClientImpl;
let grpcWeb: GrpcWebImpl;

export const getRpcEndpointKey = (rpcEndpoint: string | HttpEndpoint) => {
    if (typeof rpcEndpoint === 'string') {
        return rpcEndpoint;
    } else if (!!rpcEndpoint) {
        //@ts-ignore 
        return rpcEndpoint.url;
    }
}

export const getRpcClient = async (rpcEndpoint: string | HttpEndpoint) => {
    const key = getRpcEndpointKey(rpcEndpoint);
    if (!key) return;
    if (_rpcClients.hasOwnProperty(key)) {
        return _rpcClients[key];
    }
    // const tmClient = await Tendermint34Client.connect(rpcEndpoint);
    if (typeof window === "undefined") {
        // node.js
        console.log("node.js");
  
        grpcWeb = new GrpcWebImpl(key, {
          transport: NodeHttpTransport(),
          // debug: true,
        });
      } else {
        // browser
        console.log("browser");
  
        grpcWeb = new GrpcWebImpl(key, {
          transport: grpc.CrossBrowserHttpTransport({ withCredentials: true }),
          // debug: true,
        });
    }

    //@ts-ignore
    grcWebClient = new ServiceClientImpl(grpcWeb);
    // tmClient = new QueryClientImpl(grpcWeb);
    _rpcClients[key] = tmClient;
    return tmClient;
}
